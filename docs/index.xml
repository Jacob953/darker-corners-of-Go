<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go 鲜为人知的角落</title>
    <link>https://jacob953.com/darker-corners-of-go/</link>
    <description>Recent content on Go 鲜为人知的角落</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="https://jacob953.com/darker-corners-of-go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第 0 章 介绍</title>
      <link>https://jacob953.com/darker-corners-of-go/0-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/0-introduction/</guid>
      <description>第 0 章 介绍  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 译者序 决定翻译《Darker Corners of Go》那日，与 Rytis 先生结束初步交流时，已经凌晨 5 点了，想来更多是一种冲动。自从开始学习 Go 以来，越来越感到 Go 语言核心理论的简单美。 在学习 Go 之初，我也硬着头皮去仔细阅读过《Effective Go》。但对于一个初学者来说，很难领会“圣经”中所表达的核心理念。
于是，我试着去阅读《Darker Corners of Go》，精确、易懂、简短，以类型的方式对陷阱进行分类。尽管它不是很典型的入门类型书籍，但它依然让我直观地感受到了 Go 语言的特性，还帮助我更快地锁定查阅的范围。 所以，我打算干脆将它用更加地道的方式翻译出来，直接分享给大家。一方面，可以锻炼自己的英文水平，面向更加开阔的技术世界；另一方面，可以对 Go 有更加深入的了解，还可以为 Go 的中文资源做贡献。
这篇文章的篇幅很短，所以翻译得比较轻松，以不至于萌生放弃的念头。翻译工作仍在继续，我会逐步发布新的章节，在此面向中文社区的 Gopher 征求意见，希望给读者带来更好的阅读体验。 这本书是根据《Darker Corners of Go》的电子版翻译过来的，与网上的电子版有一定的差异，有些内容是电子版没有的，或许后续会更新上去。
实际上，在多年前，Kyle Quest 发布过一篇 &amp;ldquo;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&amp;rdquo;，当然，这篇文章也有中文译本。 那篇文章以难度高低的方式对陷阱进行分类，而《Go 鲜为人知的角落》以类型的方式对陷阱进行分类。对于一个经验不足的 Gopher 来说，我认为后者或许更易被接受和学习。
由于本人也是 Gopher 新手，翻译过程中难免会有一些错误和问题，还希望各位高手批评指正。如果您觉得翻译或内容中有任何错误和问题，请您及时反馈给我，以便及时地进行修正：jacob953@csu.edu.cn
最后，我要感谢 Rytis Bieliunas 先生，是他给予了我极大的信任，让我以独译的角色翻译这本书，并时刻关注译本的进度，同时也要感段桂华女士，在翻译筹备过程中，是她在背后给予了我很多支持。</description>
    </item>
    
    <item>
      <title>第 1 章 代码格式化</title>
      <link>https://jacob953.com/darker-corners-of-go/1-code-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/1-code-formatting/</guid>
      <description>第 1 章 代码格式化  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 gofmt Go 大部分代码的格式化都是由 gofmt 工具强制执行的。gofmt 可以对源文件进行自动修改，例如，对导入的声明进行排序和对代码应用缩进等。 这是自切片面包以来最好的东西，因为它让开发人员不必再去争论这些无关紧要的事情。例如，使用制表符进行缩进，使用空格进行对齐，对代码风格的争论便到此为止。
你完全可以不使用 gofmt 工具，但如果你真的使用它，你就不能把它配置成一种特定的格式化风格。该工具完全没有提供任何代码格式化的选项，而这正是重点所在—— 提供一种统一的、“足够好”的格式化风格。这可能没有人喜欢的风格，但 Go 的开发者最终决定 统一胜于完美。
统一风格和自动格式化代码有很多好处，包括但不限于：
 在代码审查中，你不需要花时间在格式化问题上； 你不需要再与强迫症的同事去争论，开头的大括号应该放在哪里，或者应该用什么来做缩进。你的所有热情和精力都可以更有意义的地方。 代码更容易写：你不需要担心代码的格式化细节。 代码更容易读：你不需要在去适应不熟悉的代码风格。  大多数流行的 IDE 都有 Go 的插件，会在保存源文件时自动运行 gofmt。
如果必要，你可以使用诸如 goformat 此类第三方工具自定义 Go 的代码风格。
长行代码 gofmt 不会尝试分解长行代码，但你可以利用有诸如 golines 等第三方工具可以做到这一点。（一行代码不建议超过 200 个字母）
正括号 在 Go 中，正括号必须放在行尾。有趣的是，这并不是由gofmt强制执行的，而是Go词法分析器实现方式的副作用。 不管有没有 gofmt，正括号都不能放在新的一行上：
package main  // 缺少函数体 func main() // 语法错误：不期望分号或换行在 { 前。 { }  // 没毛病!</description>
    </item>
    
    <item>
      <title>第 2 章 包导入</title>
      <link>https://jacob953.com/darker-corners-of-go/2-imports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/2-imports/</guid>
      <description>第 2 章 包导入  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 未使用的导入包 带有未使用导入包的 Go 程序是无法进行编译的。这是该语言的特点，因为导入包会降低编译器的速度。 在大型程序中，导入未使用的包会对编译时间产生重大影响。
为了在开发过程中使编译器正常运行，你可以以下方式导入未使用的包：
package main import (  &amp;#34;fmt&amp;#34;  &amp;#34;math&amp;#34; )  // 参照导入未使用的包 var _ = math.Round  func main() {  fmt.Println(&amp;#34;Hello&amp;#34;) } goimports 更好的解决方案是使用 goimports 工具，它可以删除未引用的导入包。更棒的是，它试图自动找到并添加缺失的包：
package main import &amp;#34;math&amp;#34;  // 导入而未使用：&amp;#34;math&amp;#34; func main() {  fmt.Println(&amp;#34;Hello&amp;#34;) // 未定义：fmt } 运行 goimports：
./goimports main.go package main import &amp;#34;fmt&amp;#34;  func main() {  fmt.</description>
    </item>
    
    <item>
      <title>第 3 章 变量</title>
      <link>https://jacob953.com/darker-corners-of-go/3-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/3-variables/</guid>
      <description>第 3 章 变量  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 未使用的变量 含有未使用变量的 Go 程序无法编译：
 存在未使用的变量，表明可能存在一个错误[&amp;hellip;]，Go 拒绝编译带有未使用的变量或包导入，以短期的便利保证长期的构建速度和程序的清晰度。
 https://golang.org/doc/faq    该规则的例外是全局变量和函数参数：
package main var unusedGlobal int // 合法的 func f1(unusedArg int) { // 未使用的函数声明也是可以的  // 错误: 定义但未使用  a, b := 1,2  // 这里使用了 b ，但 a 只是分配给了，不算是 &amp;#34;使用&amp;#34;  a = b } 短变量声明 短变量声明只在函数中起作用：
package main v1 := 1 // 错误: 在函数体外不能有声明语句  var v2 = 2 // 合法的 func main() {  v3 := 3 // 合法的  fmt.</description>
    </item>
    
    <item>
      <title>第 4 章 运算符</title>
      <link>https://jacob953.com/darker-corners-of-go/4-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/4-operators/</guid>
      <description>第 4 章 运算符  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 运算符优先级 Go的运算符优先级与其他语言不同：
优先级 运算符 5 *, /, %, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;amp;, &amp;amp;^ 4 +, -, |, ^ 3 ==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;= 2 &amp;amp;&amp;amp; 1 || 与 C 语言进行比较：
优先级 运算符 10 *, /, % 9 +, - 8 &amp;lt;&amp;lt;, &amp;gt;&amp;gt; 7 &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;= 6 ==, != 5 &amp;amp; 4 ^ 3 | 2 &amp;amp;&amp;amp; 1 || 对于同一表达式，可能会产生不同结果：</description>
    </item>
    
    <item>
      <title>第 5 章 常量</title>
      <link>https://jacob953.com/darker-corners-of-go/5-constants/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/5-constants/</guid>
      <description>第 5 章 常量  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 iota 在 Go 中，iota 是起始常量编号。 它并不像人们想象的那样意味着 &amp;ldquo;从零开始&amp;rdquo;。它是当前 const 块中一个常数的索引：
const (  myconst = &amp;#34;c&amp;#34;  myconst2 = &amp;#34;c2&amp;#34;  two = iota // 2 ) 使用两次 iota 并不能重置编号：
const (  zero = iota // 0  one // 1  two = iota // 2 ) </description>
    </item>
    
    <item>
      <title>第 6 章 切片 &amp; 数组</title>
      <link>https://jacob953.com/darker-corners-of-go/6-slices-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/6-slices-arrays/</guid>
      <description>第 6 章 切片 &amp;amp; 数组  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 切片和数组 在 Go 中，切片和数组有类似的目的。它们的声明方式也几乎相同：
package main  import &amp;#34;fmt&amp;#34;  func main() {  slice := []int{1, 2, 3}  array := [3]int{1, 2, 3}   // 让编译器来计算数组的长度  // 这将是一个等同于 [3]int  array2 := [...]int{1, 2, 3}  fmt.Println(slice, array, array2) } 输出：
[1 2 3] [1 2 3] [1 2 3] 切片就像上层附带有用功能的数组。在实现过程中，他们在内部使用指向数组的指针。 但是，切片是如此的方便，以至于我们很少在 Go 中直接使用数组。</description>
    </item>
    
    <item>
      <title>第 7 章 字符串 &amp; 字节数组</title>
      <link>https://jacob953.com/darker-corners-of-go/7-strings-byte-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/7-strings-byte-arrays/</guid>
      <description>第 7 章 字符串 &amp;amp; 字节数组  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 Go 的字符串 在 Go 中，字符串的定义是这样的：
type StringHeader struct {  Data uintptr  Len int } 字符串本身是值类型，包含一个指向字节数组的指针和一个固定的长度。与 C 语言不同，Go 字符串中的零字节并不标志着字符串的结束。 字符串里面可以包含任何数据。通常情况下，这些数据被编码为 UTF-8 字符串，但它不一定是这样。
字符串不能为 nil 在 Go 中，字符串永远不会为 nil。字符串的默认值是一个空字符串，而不是 nil：
package main  import &amp;#34;fmt&amp;#34;  func main() {  var s string  fmt.Println(s == &amp;#34;&amp;#34;) // 为真  s = nil // 错误: 不能在赋值中使用 nil 作为字符串类型 } 字符串是不可变的（某种程度上） Go 并不希望你修改字符串：</description>
    </item>
    
    <item>
      <title>第 8 章 哈希</title>
      <link>https://jacob953.com/darker-corners-of-go/8-maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/8-maps/</guid>
      <description>第 8 章 哈希  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 哈希的迭代顺序是随机的（实则不然） 技术上来说，哈希的迭代顺序是“未定义的”。在 Go 中，哈希的内部会使用一个哈希表，所以迭代通常是按照元素在该表中的顺序进行的。 但这个顺序是不可靠的，当新的元素被添加到哈希中时，这个顺序会随着哈希表的增长而改变。 在 Go 的早期时候，这对那些没有阅读说明，并且依赖按一定顺序迭代哈希的程序员来说，是一个巨坑。 为了帮助程序员尽早，而不是在生产中发现这些问题，Go 的开发者将哈希的迭代变得随机：
package main  import &amp;#34;fmt&amp;#34;  func main() {  // 添加顺序元素  // 使哈希看起来像是按顺序迭代的  m := map[int]int{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5}  for i := 0; i &amp;lt; 5; i++ {  for i := range m {  fmt.Print(i, &amp;#34; &amp;#34;)  }  fmt.</description>
    </item>
    
    <item>
      <title>第 9 章 循环</title>
      <link>https://jacob953.com/darker-corners-of-go/9-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/9-loops/</guid>
      <description>第 9 章 循环  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 range 迭代器会返回两个值 由于 for-range 的工作方式与其他语言不尽相同，对于 Go 的初学者来说，这很可能是一个坑。 for-range 会返回一个或两个变量，第一个是迭代索引（如果是迭代哈希，则是哈希键），第二个是值。如果只使用一个变量——那它就是索引：
package main  import &amp;#34;fmt&amp;#34;  func main() {  slice := []string{&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;}  for v := range slice {  fmt.Println(v) // 0, 1, 2  }  for _, v := range slice {  fmt.Println(v) // one two three  } } for 循环会重复使用迭代器变量 在循环中，每次迭代都会重复使用同一个迭代器变量。如果你读取它的地址，那每次都是同一个地址。 这意味着在每次迭代中，迭代器变量的值都会被复制到同一个内存位置。这使得循环更有效率，但也是 Go 最常见的陷阱之一。 下面是 Go wiki 中的一个例子：</description>
    </item>
    
    <item>
      <title>第 10 章 switch &amp; select 语句</title>
      <link>https://jacob953.com/darker-corners-of-go/10-switch-select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/10-switch-select/</guid>
      <description>第 10 章 switch &amp;amp; select 语句  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 case 语句默认为断句 与 C 语言的 case 语句不同，Go 中的 case 语句默认为中断。要使 case 语句通过，请使用 fallthrough 关键字：
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;time&amp;#34; )  func main() {  // 这样无法运行，如果是 Saturday 情况，那什么都不会被打印  switch time.Now().Weekday() {  case 6: // 这种情况下，不会做任何事情，并跳出 switch  case 7:  fmt.Println(&amp;#34;weekend&amp;#34;)  }   switch time.Now().Weekday() {  case 1:  break // 这个 break 没有任何作用，因为无论如何都会跳出  case 2:  fmt.</description>
    </item>
    
    <item>
      <title>第 11 章 函数</title>
      <link>https://jacob953.com/darker-corners-of-go/11-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/11-functions/</guid>
      <description>第 11 章 函数  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 defer 语句 defer 似乎没有大坑，但有一些细微差别是值得一提的。
关于这个问题，有一篇来自 Andrew Gerrand 的 好文章   ：
 defer 语句会将其包涵的递延函数推到一个调用列表上， 保存的调用列表将在原函数返回后被执行。 因此，defer 通常被用来简化执行各种清理动作的函数。
 但是，有几点是需要特别注意的：
 虽然递延函数在原函数返回时才会被执行，但其参数也会在调用 defer 时被使用：  package main  import (  &amp;#34;fmt&amp;#34; )  func main() {  s := &amp;#34;defer&amp;#34;  defer fmt.Println(s)  s = &amp;#34;original&amp;#34;  fmt.Println(s) } 输出：
original defer 一旦原函数返回，递延函数就按后进先出的顺序执行：  package main  import (  &amp;#34;fmt&amp;#34; )  func main() {  defer fmt.</description>
    </item>
    
    <item>
      <title>第 12 章 协程</title>
      <link>https://jacob953.com/darker-corners-of-go/12-goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/12-goroutines/</guid>
      <description>第 12 章 协程  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 什么是 goroutine 通常情况下，goroutine 可以被认为是轻量级线程。goroutine 的启动非常快速，因为仅需要使用 2kb 内存就可以初始化堆栈（当然，也可以改动）。 goroutine 由 Go 的运行时系统管理（而不是操作系统），因此，在上下文切换的代价很低。 goroutine 就是为并发而生的，即使在多个硬件的线程上运行，它们也可以并行。
 并发是指同时处理很多事情；并行是指同时做很多事情。
Rob Pike
 goroutine 的效率是非常之高的，如果与 channel 相结合，它们很可能是 Go 的最佳功能。 尽管 goroutine 在 Go 中是无处不在的，但也存在一个极端但很好的例子。 当一个服务器管理大量并发的 websocket 连接时，goroutine 需要分别被单独管理，但更多可能是处于闲置状态的（不占用很多 CPU 或内存）。 为每个连接都创建一个线程，一旦连接数变得数以千计就会出现问题，然而，在使用 goroutine 时，产生数十万的连接也是可能的。
关于 goroutine 是如何工作的，可以 在这里   找到更详细的帖子。
运行 goroutine 并不能阻止程序退出 在 Go 中，当主函数退出时，程序也就退出了。此时，任何在后台运行的 goroutine 都会安静地停止。 下面的程序将退出，且不打印任何东西：
package main  import (  &amp;#34;fmt&amp;#34;  &amp;#34;time&amp;#34; )  func goroutine1() {  time.</description>
    </item>
    
    <item>
      <title>第 13 章 接口</title>
      <link>https://jacob953.com/darker-corners-of-go/13-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/13-interfaces/</guid>
      <description>第 13 章 接口  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 检查接口变量是否为 nil 在 Go 中，接口当然是最常见的坑之一。但与其他语言不同，Go 的接口不只是一个指向内存位置的指针。
一个接口类型的结构有：
 静态类型（接口本身的类型） 动态类型 值   如果一个变量为接口类型，当它的动态类型和值都为 nil 时，那它就等于 nil。
 package main  import (  &amp;#34;fmt&amp;#34; )  type ISayHi interface {  Say() }  type SayHi struct{}  func (s *SayHi) Say() {  fmt.Println(&amp;#34;Hi!&amp;#34;) }  func main() {  // 这里，变量 &amp;#34;sayer&amp;#34; 只具有静态类型的 ISayHi。  // 动态类型和值都是 nil  var sayer ISayHi   // 果然，Sayer 等于 nil  fmt.</description>
    </item>
    
    <item>
      <title>第 14 章 继承</title>
      <link>https://jacob953.com/darker-corners-of-go/14-inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/14-inheritance/</guid>
      <description>第 14 章 继承  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 重定义类型 vs 嵌入类型 Go 的类型系统可能更加实用。它不像 C++ 或 Java 那样是面向对象的。在 Go 中，你不能真正地继承结构体或接口（因为没有子类），但你可以把它们放在一起（嵌入），形成更复杂的结构体或接口。
 嵌入与子类有一个重要的不同之处：当我们嵌入一个类型时，该类型的方法会成为外类型的方法；但是当它们被调用时，方法的接收者是内类型，而不是外类型。
 https://golang.org/doc/effective_go    除了嵌入类型，Go 还允许重新定义一个类型。 重定义会继承一个类型的字段，但没有继承其方法：
package main  type t1 struct {  f1 string }  func (t *t1) t1method() { }  // 嵌入类型 type t2 struct {  t1 }  // 重定义类型 type t3 t1  func main() {  var mt1 t1  var mt2 t2  var mt3 t3   // 字段在所有情况下都会被继承  _ = mt1.</description>
    </item>
    
    <item>
      <title>第 15 章 平等性</title>
      <link>https://jacob953.com/darker-corners-of-go/15-equality/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/15-equality/</guid>
      <description>第 15 章 平等性  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 Go 的平等性 在 Go 中，有很多不同的方法来比较平等性，但没有一个是完美的。
== 和 != 操作符 在 Go 中，== 运算符是最简单、最有效的比较方法，但它只对某些类型有效。 最值得注意的是，它对切片或哈希不起作用。如果采用这种方式，切片和哈希只能与 nil 进行比较。
你可以使用 == 比较基本类型，如 int 和 string，还有数组和结构体中的元素本身也可以使用 == 进行比较：
package main  import &amp;#34;fmt&amp;#34;  type compareStruct1 struct {  A int  B string  C [3]int }  func main() {  s1 := compareStruct1{}  s2 := compareStruct1{}  fmt.Println(s1 == s2) // 正常运行，打印 true } 在结构体中，一旦添加了一个不能使用 == 比较的属性，就需要用另一种方式来比较：</description>
    </item>
    
    <item>
      <title>第 16 章 内存管理</title>
      <link>https://jacob953.com/darker-corners-of-go/16-memory-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/16-memory-management/</guid>
      <description>第 16 章 内存管理  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 结构体应该按值传递还是按引用传递？ 在 Go 中，函数的参数总是按值传递。当一个结构体（或数组）类型的变量被传递到函数中时，整个结构体会被复制。 如果结构体的指针被传递，那么这个指针会被复制，但它所指向的结构体不会被复制。拷贝的是 8 个字节内存（对于 64 位架构），而不是该结构体的大小。 那么，这是否意味着将结构体作为指针传递会更好？经典回答——这要看情况。
分配一个结构体（或数组）的指针：
 将其放在堆中，而不是像通常情况下放到栈中； 垃圾收集器来管理堆内存的分配。  如果你想复习一下栈与堆的关系，可以看看这个 stackoverflow 帖子   。就本章而言，了解这些就足够了：堆栈——快，堆——慢。
这意味着如果分配结构体比传递它们更频繁，那么在栈中复制它们会更快：
package test  import (  &amp;#34;testing&amp;#34; )  type myStruct struct {  a, b, c int64  d, e, f string  g, h, i float64 }  func byValue() myStruct {  return myStruct{  a: 1, b: 1, c: 1,  d: &amp;#34;foo&amp;#34;, e: &amp;#34;bar&amp;#34;, f: &amp;#34;baz&amp;#34;,  g: 1.</description>
    </item>
    
    <item>
      <title>第 17 章 日志</title>
      <link>https://jacob953.com/darker-corners-of-go/17-logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/17-logging/</guid>
      <description>第 17 章 日志  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 log.Fatal 和 log.Panic 在 Go 中，使用日志包进行日志记录时，log.Fatal 和log.Panic 这两个函数有一个陷阱在等着你。 与你期望的日志函数不同，这些函数不仅仅是用不同的日志级别记录一条消息，它们还终止了整个应用程序。 log.Fatal 干净地退出应用程序，log.Panic 调用运行时警告。下面是 Go 日志包中的实际函数：
// Fatal 相当于在 Print() 之后调用 os.Exit(1) func Fatal(v ...interface{}) {  std.Output(2, fmt.Sprint(v...))  os.Exit(1) }  // Panic 相当于在 Print() 之后调用 panic() func Panic(v ...interface{}) {  s := fmt.Sprint(v...)  std.Output(2, s)  panic(s) } </description>
    </item>
    
    <item>
      <title>第 18 章 时间</title>
      <link>https://jacob953.com/darker-corners-of-go/18-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jacob953.com/darker-corners-of-go/18-time/</guid>
      <description>第 18 章 时间  当前译本仍不稳定，如翻译有问题请及时联系 jacob953@csu.edu.cn  。
 使用 time.LoadLocation 从文件中读取数据 在 Go 中，这是我个人而言最喜欢的一个坑。在时区之间转换，首先要需要加载位置信息。事实证明，每次调用 time.LoadLocation 都会从一个文件中读取数据。在格式化大量 CSV 报告的每一行时，这不是最好的做法：
package main  import (  &amp;#34;testing&amp;#34;  &amp;#34;time&amp;#34; )  func BenchmarkLocation(b *testing.B) {  for n := 0; n &amp;lt; b.N; n++ {  loc, _ := time.LoadLocation(&amp;#34;Asia/Kolkata&amp;#34;)  time.Now().In(loc)  } }  func BenchmarkLocation2(b *testing.B) {  loc, _ := time.LoadLocation(&amp;#34;Asia/Kolkata&amp;#34;)  for n := 0; n &amp;lt; b.</description>
    </item>
    
  </channel>
</rss>
